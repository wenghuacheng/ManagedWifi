[
  {
    "Id": "1211302",
    "ThreadId": "533181",
    "Html": "All the functions worked great, but there was a bit of stumbling. I hope the following helps others with the issues I had, such as the dreaded <em>Network Connection Profile is Corrupted</em> error.<br />\n<ul>\n<li>&lt;hex&gt; must come before &lt;name&gt; element.</li>\n<li>When using String.Format, I ended up having to have everything on one line, and not in a resource file. Maybe it's an encoding issue? Not sure, and didn't have time to research it.</li>\n<li>You can find profiles at <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms707341(v=vs.85).aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/windows/desktop/ms707341(v=vs.85).aspx</a>, but they're missing the &lt;hex&gt; item.</li>\n<li>\nYou can export a profile by typing the following at a command prompt: &quot;netsh wlan export profile NAME&quot; where NAME is the wireless network name as listed in Windows.<br />\n</li>\n</ul>\nGood luck!\r<br />\n<br />\nThanks and Best,\r<br />\n<br />\n-Auri<br />\n",
    "PostedDate": "2014-02-20T10:37:46.067-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1354727",
    "ThreadId": "533181",
    "Html": "Here's the code to make everyone's life easier. It works to connect to WPA2-AES and open networks; I haven't had the opportunity to test yet with WPA2-TKIP, WPA, or WEP yet, but I'm pretty sure it will work. <br />\nI made two base XML profiles. This was required to support open networks and secured networks. I have not done anything with Enterprise networks yet, so additional ones may be needed, but this is a good start.<br />\nNote I omitted code from a class I built that contains all the SSIDs detected and all the info provided by calling managedwifi functions. This made it easier to keep track of since managedwifi has 3 different structures you have to loop thru to get all the data:<br />\nwlanIface.GetAvailableNetworkList(0)<br />\nwlanIface.GetNetworkBssList()<br />\nwlanIface.GetProfiles()<br />\nSo here's the code:<br />\n<pre><code>    Dim WlanC As New WlanClient\n    Public Const BASESECUREXMLPROFILE = &quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot;?&gt;&lt;WLANProfile xmlns=&quot;&quot;http://www.microsoft.com/networking/WLAN/profile/v1&quot;&quot;&gt;&lt;name&gt;{0}&lt;/name&gt;&lt;SSIDConfig&gt;&lt;SSID&gt;&lt;hex&gt;{1}&lt;/hex&gt;&lt;name&gt;{2}&lt;/name&gt;&lt;/SSID&gt;{3}&lt;/SSIDConfig&gt;&lt;connectionType&gt;ESS&lt;/connectionType&gt;&lt;connectionMode&gt;auto&lt;/connectionMode&gt;&lt;autoSwitch&gt;false&lt;/autoSwitch&gt;&lt;MSM&gt;&lt;security&gt;&lt;authEncryption&gt;&lt;authentication&gt;{4}&lt;/authentication&gt;&lt;encryption&gt;{5}&lt;/encryption&gt;&lt;useOneX&gt;false&lt;/useOneX&gt;&lt;/authEncryption&gt;&lt;sharedKey&gt;&lt;keyType&gt;{6}&lt;/keyType&gt;&lt;protected&gt;false&lt;/protected&gt;&lt;keyMaterial&gt;{7}&lt;/keyMaterial&gt;&lt;/sharedKey&gt;&lt;keyIndex&gt;0&lt;/keyIndex&gt;&lt;/security&gt;&lt;/MSM&gt;&lt;/WLANProfile&gt;&quot;\n    Public Const BASEOPENXMLPROFILE = &quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot;?&gt;&lt;WLANProfile xmlns=&quot;&quot;http://www.microsoft.com/networking/WLAN/profile/v1&quot;&quot;&gt;&lt;name&gt;{0}&lt;/name&gt;&lt;SSIDConfig&gt;&lt;SSID&gt;&lt;hex&gt;{1}&lt;/hex&gt;&lt;name&gt;{2}&lt;/name&gt;&lt;/SSID&gt;{3}&lt;/SSIDConfig&gt;&lt;connectionType&gt;ESS&lt;/connectionType&gt;&lt;connectionMode&gt;auto&lt;/connectionMode&gt;&lt;autoSwitch&gt;false&lt;/autoSwitch&gt;&lt;MSM&gt;&lt;security&gt;&lt;authEncryption&gt;&lt;authentication&gt;{4}&lt;/authentication&gt;&lt;encryption&gt;{5}&lt;/encryption&gt;&lt;useOneX&gt;false&lt;/useOneX&gt;&lt;/authEncryption&gt;{6}{7}&lt;/security&gt;&lt;/MSM&gt;&lt;/WLANProfile&gt;&quot;\n    Public Const NONBROADCASTTAG As String = &quot;&lt;nonBroadcast&gt;true&lt;/nonBroadcast&gt;&quot;\n\nPublic Sub WiFiConnect_Click(sender As Object, e As EventArgs) Handles WiFiConnect.click()\n    Dim ssid As String = sender.name\n    Dim xml As String = &quot;&quot;\n    Dim profilename As String = &quot;&quot;\n    Dim hiddentag As Boolean = False\n\n    If ssid = HIDDENSSID Then 'if it was the hidden ssid, prompt for the ssid name and store it in ssid variable and flip the tag as true so we put in that data\n        ssid = InputBox(&quot;Please enter the Hidden Network's SSID&quot;)\n        If ssid = &quot;&quot; Then Exit Sub 'cancel if they didn't enter a ssid\n        hiddentag = True\n    End If\n</code></pre>\n\n'I omitted some code I have that references a class I built that I'm not sharing here. '<br />\n'That is what ssidinfo(0) is. There is other sample code on these forums that show you how to get this info, I just did that and complied into a class.<br />\n<pre><code>      if ssidinfo(0).ProfileName = &quot;&quot; then\n            Dim key As String = &quot;&quot;\n            Dim auth As String = &quot;&quot;\n            Dim cipher As String = &quot;&quot;\n            Dim keytype As String = &quot;&quot;\n            Select Case ssidinfo(0).AuthAlog\n                Case Is = Wlan.Dot11AuthAlgorithm.IEEE80211_Open\n                    auth = &quot;open&quot;\n                Case Is = Wlan.Dot11AuthAlgorithm.IEEE80211_SharedKey\n                    'not implemented yet\n                Case Is = Wlan.Dot11AuthAlgorithm.RSNA\n                    auth = &quot;WPA2PSK&quot;\n                Case Is = Wlan.Dot11AuthAlgorithm.RSNA_PSK\n                    auth = &quot;WPA2PSK&quot;\n                Case Is = Wlan.Dot11AuthAlgorithm.WPA\n                    auth = &quot;WPAPSK&quot;\n                Case Is = Wlan.Dot11AuthAlgorithm.WPA_None\n                    auth = &quot;WPAPSK&quot;\n                Case Is = Wlan.Dot11AuthAlgorithm.WPA_PSK\n                    auth = &quot;WPAPSK&quot;\n            End Select\n            Select Case ssidinfo(0).CipherAlog\n                Case Is = Wlan.Dot11CipherAlgorithm.CCMP\n                    cipher = &quot;AES&quot;\n                    keytype = &quot;passPhrase&quot;\n                Case Is = Wlan.Dot11CipherAlgorithm.TKIP\n                    cipher = &quot;TKIP&quot;\n                    keytype = &quot;passPhrase&quot;\n                Case Is = Wlan.Dot11CipherAlgorithm.None\n                    cipher = &quot;none&quot;\n                    keytype = &quot;&quot;\n                    key = &quot;&quot;\n                Case Is = Wlan.Dot11CipherAlgorithm.WEP\n                    cipher = &quot;WEP&quot;\n                    keytype = &quot;networkKey&quot;\n                Case Is = Wlan.Dot11CipherAlgorithm.WEP40\n                    cipher = &quot;WEP&quot;\n                    keytype = &quot;networkKey&quot;\n                Case Is = Wlan.Dot11CipherAlgorithm.WEP104\n                    cipher = &quot;WEP&quot;\n                    keytype = &quot;networkKey&quot;\n            End Select\n            profilename = ssid\n            If cipher = &quot;none&quot; Then\n                xml = AvailableSSIDs.BASEOPENXMLPROFILE\n            Else\n                xml = AvailableSSIDs.BASESECUREXMLPROFILE\n                key = InputBox(&quot;Please enter the Network Key&quot;)\n                If key = &quot;&quot; Then Exit Sub\n            End If\n            ssids.ConnectWiFi(xml, profilename, ssid, key, auth, cipher, keytype, hiddentag)\n        Else\n            'use saved profile found on PC\n            xml = ssidinfo(0).XMLProfile\n            profilename = ssidinfo(0).ProfileName\n            ssids.ConnectWiFi(xml, profilename)\n        End If\nEnd Sub\n\n    Public Sub ConnectWiFi(ByVal profileXML As String, ByVal profilename As String, ByVal ssid As String, _\n                           ByVal key As String, ByVal auth As String, ByVal cipher As String, ByVal keytype As String, _\n                           ByVal hiddennetwork As Boolean)\n        Dim hiddenssidtag As String = &quot;&quot;\n        If hiddennetwork Then hiddenssidtag = NONBROADCASTTAG\n        Dim hex As String = ConvertToHex(ssid).ToUpper\n        For Each wlanIface As WlanClient.WlanInterface In GetInterfaces()\n            profileXML = String.Format(profileXML, profilename, hex, ssid, hiddenssidtag, auth, cipher, keytype, key)\n            wlanIface.SetProfile(Wlan.WlanProfileFlags.AllUser, profileXML, True)\n            wlanIface.Connect(Wlan.WlanConnectionMode.Profile, Wlan.Dot11BssType.Any, profilename)\n        Next\n    End Sub\n\n    Public Sub ConnectWiFi(ByVal profileXML As String, ByVal profilename As String)\n        For Each wlanIface As WlanClient.WlanInterface In GetInterfaces()\n\n            wlanIface.SetProfile(Wlan.WlanProfileFlags.AllUser, profileXML, True)\n            wlanIface.Connect(Wlan.WlanConnectionMode.Profile, Wlan.Dot11BssType.Any, profilename)\n        Next\n    End Sub\n\n    Public Function GetInterfaces() As WlanClient.WlanInterface()\n        Return WlanC.Interfaces\n    End Function\n\n    Function ConvertToHex(ByVal asciiString As String) As String\n        Dim byteArray() As Byte\n        Dim hexNumbers As System.Text.StringBuilder = New System.Text.StringBuilder\n        byteArray = System.Text.ASCIIEncoding.ASCII.GetBytes(asciiString)\n        For i As Integer = 0 To byteArray.Length - 1\n            hexNumbers.Append(byteArray(i).ToString(&quot;x&quot;))\n        Next\n        Return hexNumbers.ToString\n    End Function</code></pre>\n\n",
    "PostedDate": "2015-02-22T08:55:16.573-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1354743",
    "ThreadId": "533181",
    "Html": "Here is the code I use to populate my class structure and my class itself:<br />\n<pre><code>Class AvailableSSIDs\n    Public Structure SSIDInfo\n        Dim DetectedTimestamp As System.DateTime\n        Dim Flags As WiFiFlags\n        Dim SSID As String\n        Dim BSSType As Wlan.Dot11BssType\n        Dim PhyType As Wlan.Dot11PhyType\n        Dim AuthAlog As Wlan.Dot11AuthAlgorithm\n        Dim CipherAlog As Wlan.Dot11CipherAlgorithm\n        Dim SecurityOn As Boolean\n        Dim NumBSSIDs As UInteger\n        Dim SigQuality As UInteger\n        Dim ProfileName As String\n        Dim MorePhyTypes As Boolean\n        Dim Connectable As Boolean\n        Dim LinkQuality As UInteger\n        Dim RSSI As Integer\n        Dim CenterFreq As UInteger\n        Dim MacAddr As String\n        Dim XMLProfile As String\n        Dim Key As String\n        Dim Hex As String\n    End Structure\n    Private SSIDs As New List(Of SSIDInfo)\n\n    Enum WiFiFlags\n        Any = -1\n        AvailableNetwork = 0\n        HasProfile = 2\n        Connected = 3\n    End Enum\n end class\n\n Public Sub GetAPInfo(Optional byval flag as WiFiFlags = WiFiFlags.Any)\n       For Each wlanIface As WlanClient.WlanInterface In GetInterfaces()\n            Dim networks As Wlan.WlanAvailableNetwork() = wlanIface.GetAvailableNetworkList(0)\n            For Each network As Wlan.WlanAvailableNetwork In networks\n                If network.flags = flag Or flag = WiFiFlags.Any Then 'This check to filter for only the types of networks we want. Once found then grab the wifi info\n                    Dim newssid As New AvailableSSIDs.SSIDInfo 'This is my class I've referred to a few times\n                    newssid.menuitem = New ToolStripMenuItem\n                    newssid.DetectedTimestamp = Now\n                    newssid.Flags = network.flags\n                    newssid.SSID = GetStringForSSID(network.dot11Ssid)\n                    newssid.BSSType = network.dot11BssType\n                    newssid.AuthAlog = network.dot11DefaultAuthAlgorithm\n                    newssid.CipherAlog = network.dot11DefaultCipherAlgorithm\n                    newssid.SecurityOn = network.securityEnabled\n                    newssid.MorePhyTypes = network.morePhyTypes\n                    newssid.Connectable = network.networkConnectable\n                    newssid.NumBSSIDs = network.numberOfBssids\n                    newssid.ProfileName = network.profileName\n                    newssid.SigQuality = network.wlanSignalQuality\n\n                    Dim wlanBssEntries2 As Wlan.WlanBssEntry() = wlanIface.GetNetworkBssList()\n                    Dim bss As Wlan.WlanBssEntry = GetBSSEntryBySSID(wlanBssEntries2, newssid.SSID)\n                    If bss.dot11Bssid IsNot Nothing Then\n                        newssid.LinkQuality = bss.linkQuality\n                        newssid.RSSI = bss.rssi\n                        newssid.CenterFreq = bss.chCenterFrequency\n                        newssid.PhyType = bss.dot11BssPhyType\n                        newssid.MacAddr = BitConverter.ToString(bss.dot11Bssid)\n                    End If\n\n                    If newssid.ProfileName &lt;&gt; &quot;&quot; Then\n                        newssid.XMLProfile = wlanIface.GetProfileXml(newssid.ProfileName) 'now we have the xml if one existed\n                    End If\n           End If\n      Next\n Next\n\n    Private Function GetBSSEntryBySSID(ByRef wlanBssEntries2() As Wlan.WlanBssEntry, ByVal ssid As String) As Wlan.WlanBssEntry\n        Dim res As Wlan.WlanBssEntry = Nothing\n        For Each bss In wlanBssEntries2\n            If GetStringForSSID(bss.dot11Ssid) = ssid Then\n                res = bss\n                Exit For\n            End If\n        Next\n        Return res\n    End Function\n\n    Private Function GetStringForSSID(ByVal ssid As Wlan.Dot11Ssid) As String\n        Return Encoding.ASCII.GetString(ssid.SSID, 0, CInt(ssid.SSIDLength))\n    End Function</code></pre>\n\n",
    "PostedDate": "2015-02-22T09:49:15.673-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1418461",
    "ThreadId": "533181",
    "Html": "This helped me a lot!<br />\n<br />\nI used this example to create an app to scan for Wifi Networks and monitor their signal strength, channel, mac address, ssid, etc.  Not to connect to a network, just to monitor the network neighborhood signals.  (The goal here is to tie this in with home management software so I can know when my networks are down.)<br />\n<br />\nTwo problems with the ManagedWifi.dll<br />\n<br />\nFirst, it doesn't appear to dispose of resources after each call.  Eventually you get a 'too many connections' error.  Others have noted the same thing.  I put the code in a try block, and just ignored the too many connections error, and it does seem to recover itself.  Typically it does about 100 scans, then gets maybe 36 scans with the 'too many connections', then it starts working fine again.<br />\n<br />\n<strong>Update:  I tried opening one wlanClient on startup, and then just updating that one client, rather than 'for each' on every scan.  This seems much better.  hundreds of scans now with no errors, and I think this problem is now fixed.</strong><br />\n<br />\nSecond, and maybe related to the above, but the first time it runs, it gets a bunch of ssids with their mac address etc., but doing another run 60 seconds later pulls up the same ssids, with the same signal strength as the first scan.  It behaves like it is isn't updating anything, just using again what it picked up the first time.<br />\n<br />\nI run my scanner for 100 scans over 12 minutes and the signal strength and RSSI don't change at all for 40 networks.<br />\n<br />\nIf I simultaneously run third-party scanner software, then this code immediately starts to properly update signal strengths, see new networks, etc.   Without the third-party scanner running, this code detects about 42 networks.  With the third-party scanner running, this code will continue adding new networks and get up into the 90-network range.  If I then turn off the third-party scanner, this code keeps running without error, but the values don't change any more.  So the third-party software seems to be doing something to the hardware that enables this code to work better?? <br />\n<br />\n<strong>Update:  This is on a USB wireless adapter.  If I disable that adapter, and turn on the internal wifi adapter, everything works fine.  But it doesn't work on other systems the same way.  Still a puzzle...</strong><br />\n<br />\nStill working on this.  Will update if I'm able to find a way around those two problems.<br />\n<br />\nRegards,<br />\n",
    "PostedDate": "2015-04-26T06:33:26.777-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1456211",
    "ThreadId": "533181",
    "Html": "Gerry,\r<br />\n<br />\nIn your update did you alter the for each from one of my functions or one of your own? If from one I posted can you please post the specific code changes?\r<br />\n<br />\nThanks!<br />\n",
    "PostedDate": "2015-12-16T14:55:53.85-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]