[
  {
    "Id": "922156",
    "ThreadId": "398107",
    "Html": "\r\n<p>Hello, i'm looking for an answer, how can I get connection status?</p>\r\n<p>I have some network, and i'm trying to connect with it. I need connection status for example if password was good then connected, if not then something else. Someone know how can i do that?&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> button1_Click(<span style=\"color:blue\">object</span> sender, EventArgs e)\n        {\n            button3.Visible = <span style=\"color:blue\">true</span>;\n            button1.Visible = <span style=\"color:blue\">false</span>;\n            changePos();\n\n            <span style=\"color:blue\">string</span> name2;\n            WlanClient client = <span style=\"color:blue\">new</span> WlanClient();\n            <span style=\"color:blue\">foreach</span> (WlanClient.WlanInterface wlanIface <span style=\"color:blue\">in</span> client.Interfaces)\n            {\n                Wlan.WlanBssEntry[] wlanBssEntries = wlanIface.GetNetworkBssList();\n                <span style=\"color:blue\">foreach</span> (Wlan.WlanBssEntry network <span style=\"color:blue\">in</span> wlanBssEntries)\n                {\n                    <span style=\"color:blue\">byte</span>[] macAddr = network.dot11Bssid;\n                    <span style=\"color:blue\">string</span> tMac = <span style=\"color:#a31515\">&quot;&quot;</span>;\n                    <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; macAddr.Length; i&#43;&#43;)\n                    {\n                        tMac &#43;= macAddr[i].ToString(<span style=\"color:#a31515\">&quot;x2&quot;</span>).PadLeft(2, <span style=\"color:#a31515\">'0'</span>).ToUpper();\n                    }\n                    \n                    name2 = GetStringForSSID(network.dot11Ssid);\n                    <span style=\"color:blue\">foreach</span> (Wlan.WlanProfileInfo profileInfo <span style=\"color:blue\">in</span> wlanIface.GetProfiles())\n                    {\n                        <span style=\"color:blue\">string</span> name = profileInfo.profileName; <span style=\"color:green\">// this is typically the network's SSID</span>\n                        <span style=\"color:blue\">string</span> xml = wlanIface.GetProfileXml(profileInfo.profileName);\n                    }\n\n                    textBox1.AppendText( GetStringForSSID(network.dot11Ssid) &#43; <span style=\"color:#a31515\">&quot;\\r\\n&quot;</span>);\n                    textBox2.AppendText( network.linkQuality &#43; <span style=\"color:#a31515\">&quot;%&quot;</span> &#43;<span style=\"color:#a31515\">&quot;\\r\\n&quot;</span>);\n                    textBox3.AppendText( tMac &#43; <span style=\"color:#a31515\">&quot;\\r\\n&quot;</span>);\n\n                    profileNameList.Add(GetStringForSSID(network.dot11Ssid));\n                    macList.Add(tMac); \n\n                    <span style=\"color:blue\">if</span> (name2 == <span style=\"color:#a31515\">&quot;test&quot;</span>) <strong><span style=\"color:green\">//if network is avalible then i try to connect</span></strong>\n                    {\n                        <span style=\"color:blue\">string</span> profileName = GetStringForSSID(network.dot11Ssid); ; <span style=\"color:green\">// this is also the SSID</span>\n                        <span style=\"color:blue\">string</span> mac = ConvertToHex(profileName).ToUpper();\n                        <span style=\"color:blue\">string</span> key = <span style=\"color:#a31515\">&quot;has34&quot;</span>;\n                        <span style=\"color:blue\">string</span> profileXml = <span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">&quot;&lt;?xml version=\\&quot;1.0\\&quot;?&gt;&lt;WLANProfile xmlns=\\&quot;http://www.microsoft.com/networking/WLAN/profile/v1\\&quot;&gt;&lt;name&gt;{0}&lt;/name&gt;&lt;SSIDConfig&gt;&lt;SSID&gt;&lt;hex&gt;{1}&lt;/hex&gt;&lt;name&gt;{0}&lt;/name&gt;&lt;/SSID&gt;&lt;/SSIDConfig&gt;&lt;connectionType&gt;ESS&lt;/connectionType&gt;&lt;MSM&gt;&lt;security&gt;&lt;authEncryption&gt;&lt;authentication&gt;open&lt;/authentication&gt;&lt;encryption&gt;WEP&lt;/encryption&gt;&lt;useOneX&gt;false&lt;/useOneX&gt;&lt;/authEncryption&gt;&lt;sharedKey&gt;&lt;keyType&gt;networkKey&lt;/keyType&gt;&lt;protected&gt;false&lt;/protected&gt;&lt;keyMaterial&gt;{2}&lt;/keyMaterial&gt;&lt;/sharedKey&gt;&lt;keyIndex&gt;0&lt;/keyIndex&gt;&lt;/security&gt;&lt;/MSM&gt;&lt;/WLANProfile&gt;&quot;</span>, profileName, mac, key);\n                        wlanIface.SetProfile(Wlan.WlanProfileFlags.AllUser, profileXml, <span style=\"color:blue\">true</span>);\n                        wlanIface.Connect(Wlan.WlanConnectionMode.Profile, Wlan.Dot11BssType.Any, profileName); \n                    } <span style=\"color:#008000\"><strong>// I NEED STATUS, NEED TO KNOW PASSWORD IS CORRECT OR NOT</strong></span>\n                }\n            }\n        }\n</pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\"><span style=\"white-space:pre\">\t</span>static</span> <span style=\"color:blue\">string</span> GetStringForSSID(Wlan.Dot11Ssid ssid)\n        {\n            <span style=\"color:blue\">return</span> Encoding.ASCII.GetString(ssid.SSID, 0, (<span style=\"color:blue\">int</span>)ssid.SSIDLength);\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> ConvertToHex(<span style=\"color:blue\">string</span> asciiString)\n        {\n            <span style=\"color:blue\">string</span> hex = <span style=\"color:#a31515\">&quot;&quot;</span>;\n            <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">char</span> c <span style=\"color:blue\">in</span> asciiString)\n            {\n                <span style=\"color:blue\">int</span> tmp = c;\n                hex &#43;= String.Format(<span style=\"color:#a31515\">&quot;{0:x2}&quot;</span>, (<span style=\"color:blue\">uint</span>)System.Convert.ToUInt32(tmp.ToString()));\n            }\n            <span style=\"color:blue\">return</span> hex;\n        }</pre>\n</div>\n</pre>\r\n<pre><br></pre>\r\n<pre><br></pre>\r\n<pre>Darek Musielak.</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-10-04T14:34:14.973-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1207480",
    "ThreadId": "398107",
    "Html": "Same with me, need to know if the connection attempt was successful. Does anyone know that???<br />\n",
    "PostedDate": "2014-02-12T11:25:03.137-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1316064",
    "ThreadId": "398107",
    "Html": "Under the hood, the WlanInterface.Connect method with those arguments makes an asynchronous call to the Windows API to connect using the profile supplied. This means that it spawns a new thread and the main thread that made the call returns immediately and it has no way of knowing when the other thread will get done with its work of trying to connect to the network. For this reason, the WlanInterface class provides an event to hook into, named WlanNotification, which will fire when it receives notifications from the wireless interface. <br />\n<br />\nFirst, register your event handler with the event, like so:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n         <span style=\"color:Blue;\">foreach</span> (WlanClient.WlanInterface wlanIface <span style=\"color:Blue;\">in</span> client.Interfaces)\n         {\n            wlanIface.WlanNotification  += <span style=\"color:Blue;\">new</span>                           WlanClient.WlanInterface.WlanNotificationEventHandler(<span style=\"color:Blue;\">this</span>.HandleNotification);\n         }\r\n</pre></div>It is probably better to do that in your form constructor, or somewhere that only gets called once. Otherwise every time that you click the button, you are adding one more event handler instance; thus, after the 5th button click, you will get 5 notifications raised for just the one click. Likewise, there is no need to create a new WlanClient every time the button is clicked. I would say that should be a private field and instantiated in the constructor. In any case, the WlanClient needs to be created before the handler can be registered on its WlanInterface objects.<br />\n<br />\nThen, outside of your button1_Click method, create your event handler. It should check against the return code of the Notification data:<br />\n<pre><code>  private void HandleNotification(Wlan.WlanNotificationData notifyData)\n  {\n     switch (notifyData.notificationSource)\n     {\n        case Wlan.WlanNotificationSource.ACM:\n           switch ((Wlan.WlanNotificationCodeAcm)notifyData.notificationCode)\n           {\n              case Wlan.WlanNotificationCodeAcm.ConnectionAttemptFail:\n                 ...\n                 ...\n                 break;\n              case Wlan.WlanNotificationCodeAcm.ConnectionComplete:\n                 ...\n                 ...\n                 break;\n           }\n           break;\n        case Wlan.WlanNotificationSource.MSM:\n           switch ((Wlan.WlanNotificationCodeMsm)notifyData.notificationCode)\n           {\n              case Wlan.WlanNotificationCodeMsm.Connected:\n                 ...\n                 ...\n                 break;\n           }\n           break;\n     }\n  }\n</code></pre>\n\nIt is important to note that the ConnectionComplete notification code is the event fired to signal that the entire Connect sequence has finished. It does not indicate either success or failure of the connection. However, at some point in the sequence, either the ACM code ConnectionAttemptFail or the Msm code Connected will fire, never both. Thus, in their case checks you should set some kind of state which keeps track of which code has fired, and when the ConnectionComplete code fires, act according to whether Connect succeeded or failed.<br />\n<br />\nIt is also very important to remember that these events are being raised in a separate thread from your main thread. If you wish to do something to one of your GUI controls from inside the event handler, it is necessary to put that code inside an Invoke so that the main thread can do this. <br />\nExample:<br />\n<pre><code>            case Wlan.WlanNotificationCodeAcm.ConnectionComplete:\n                 if (this.IsHandleCreated)\n                 {\n                    this.Invoke((MethodInvoker)delegate\n                    {\n                        this.TextBox1.Text = &quot;Connection Attempt Complete&quot;\n                    });\n                 }\n                 break;\n</code></pre>\n\nThere are other codes fired than just the three I listed, for different network events such as authenticating or disconnecting or what have you; the ones I listed in the code above are just the minimum needed to check for whether Connect succeeded or failed. You can find the other codes in Wlan.WlanNotificationCodeAcm and Wlan.WlanNotificationCodeMsm, defined in interop.cs. Depending on your interface you may also need to call WlanInterface.Scan() and wait for Wlan.WlanNotificationCodeAcm.ScanComplete to fire before getting the list of networks.<br />\n<br />\nHope this helps!<br />\n",
    "PostedDate": "2014-10-23T10:21:20.443-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1475619",
    "ThreadId": "398107",
    "Html": "don't work<br />\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Diagnostics;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Threading.Tasks;\nusing System.Net;\nusing System.Net.Security;\nusing System.Net.Sockets;\nusing System.Net.NetworkInformation;\nusing NativeWifi;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Runtime.InteropServices;\nusing System.Threading;\n\nnamespace cmd\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            \n            Console.Clear();\n            Console.Title = &quot;cmd&quot;;\n            Console.WriteLine(&quot;User : {0}        Host : {1}        Machine : {2}&quot;, Environment.UserName, System.Net.Dns.GetHostName(), Environment.MachineName);\n            String Hostname = System.Net.Dns.GetHostName();\n            IPHostEntry iphostentry = Dns.GetHostByName(Hostname);\n            int nIP = 0;\n            foreach (IPAddress ipaddress in iphostentry.AddressList)\n            {\n                Console.WriteLine(&quot;IP #&quot; + ++nIP + &quot;: &quot; +\n                 ipaddress.ToString());\n            }\n\n            Console.WriteLine(&quot;--------------------------------------------------------------------------------&quot;);\n            Console.WriteLine(&quot;--------------------------------------------------------------------------------&quot;);\n\n\n            WlanClient client = new WlanClient();\n            string a = &quot;0&quot;;\n            string b = &quot;0&quot;;\n            string c = &quot;0&quot;;\n            string d = &quot;0&quot;;\n            string e = &quot;0&quot;;\n            string f = &quot;0&quot;;\n            foreach (WlanClient.WlanInterface wlanIface in client.Interfaces)\n            {\n\n                Wlan.WlanAvailableNetwork[] wlanBssEntries = wlanIface.GetAvailableNetworkList(0);\n\n                foreach (Wlan.WlanAvailableNetwork network in wlanBssEntries)\n                {\n\n                    a = System.Text.ASCIIEncoding.ASCII.GetString(network.dot11Ssid.SSID).Trim((char)0);\n\n\n                    b = (network.wlanSignalQuality.ToString() + &quot;%&quot;); // качество связи в процентах\n                    c = (network.dot11DefaultAuthAlgorithm.ToString().Trim((char)0)); // тип безопасности\n                    d = (network.dot11DefaultCipherAlgorithm.ToString().Trim((char)0)); // тип шифрования\n                    e = (network.dot11BssType.ToString().Trim((char)0));\n                    f = (network.profileName.ToString().Trim((char)0));\n\n                    Console.WriteLine(&quot;{0,-16} {1,12} {2,15} {3,5} {4,15} {5,5}&quot;, a, b, c, d, e, f);\n\n                }\n            }\n            Console.WriteLine(&quot; &quot;);\n            Console.WriteLine(&quot; &quot;);\n            Console.Write(&quot;ProfileName : &quot;);\n            String profileName = Console.ReadLine();\n            Console.Write(&quot;Key : &quot;);\n            String key = Console.ReadLine();\n\n            String hex = profileName;\n            byte[] hy = Encoding.Unicode.GetBytes(hex);\n            String hex2 = BitConverter.ToString(hy);\n            hex = hex2.Replace(&quot;-&quot;, &quot;&quot;);\n            hex = hex.Replace(&quot;00&quot;, &quot;&quot;);\n            Console.WriteLine(hex);\n            try\n            {\n                WlanClient client1 = new WlanClient();\n\n                foreach (WlanClient.WlanInterface wlanIface in client.Interfaces)\n                {\n                    Wlan.WlanAvailableNetwork[] wlanBssEntries = wlanIface.GetAvailableNetworkList(0);\n                    foreach (Wlan.WlanAvailableNetwork network in wlanBssEntries)\n                    {\n                        //  String profileName = &quot;DIR-620&quot;;\n\n                        String strTemplate = &quot;&quot;;\n                        String authentication = &quot;&quot;;\n\n                        switch ((int)network.dot11DefaultAuthAlgorithm)\n                        {\n                            case 1: // Open\n                                break;\n                            case 2: // SHARED_KEY\n                                break;\n                            case 3: // WPA\n                                break;\n                            case 4: // WPA_PSK\n                                break;\n                            case 5: // WPA_NONE\n                                break;\n                            case 6: // RSNA\n                                break;\n                            case 7: // RSNA_PSK                           \n                                strTemplate = Properties.Resources.WPA2PSK;\n                                authentication = &quot;WPA2PSK&quot;;\n                                String encryption = network.dot11DefaultCipherAlgorithm.ToString().Trim((char)0);\n                                //      String key = &quot;76543210&quot;;\n                                String profileXml = String.Format(strTemplate, profileName, authentication, encryption, key, hex);\n\n                                wlanIface.SetProfile(Wlan.WlanProfileFlags.AllUser, profileXml, true);\n                                wlanIface.Connect(Wlan.WlanConnectionMode.Profile, Wlan.Dot11BssType.Any, profileName);\n                                Console.ReadLine();\n                                break;\n\n\n\n\n                            default:\n                                break;\n                        }\n                    }\n\n\n                }\n            }\n\n\n\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n\n            string text = System.IO.File.ReadAllText(&quot;pass.txt&quot;);\n            System.Console.WriteLine(&quot;Contents of WriteText.txt = {0}&quot;, text);\n\n            Console.ReadLine();\n\n\n\n\n\n\n                WlanClient client2 = new WlanClient();\n                foreach (WlanClient.WlanInterface wlanIface in client.Interfaces)\n                {\n                    wlanIface.WlanNotification += new WlanClient.WlanInterface.WlanNotificationEventHandler(this.OnWlanNotification);\n                }\n\n\n            Console.ReadLine();\n\n\n        }\n\n        private void OnWlanNotification(ref Wlan.WlanNotificationData notifyData, IntPtr context)\n        {\n            switch (notifyData.notificationSource)\n            {\n                case Wlan.WlanNotificationSource.ACM:\n                    switch ((Wlan.WlanNotificationCodeAcm)notifyData.notificationCode)\n                    {\n                        case Wlan.WlanNotificationCodeAcm.ConnectionStart:\n                            Console.WriteLine(&quot;ConnectionStart&quot;);\n                            break;\n                        case Wlan.WlanNotificationCodeAcm.ConnectionComplete:\n                            Console.WriteLine(&quot;ConnectionComplete&quot;);\n                            break;\n                        case Wlan.WlanNotificationCodeAcm.ConnectionAttemptFail:\n                            Console.WriteLine(&quot;ConnectionAttemptFail&quot;);\n                            break;\n                        case Wlan.WlanNotificationCodeAcm.Disconnecting:\n                            Console.WriteLine(&quot;Disconnecting&quot;);\n                            break;\n                        case Wlan.WlanNotificationCodeAcm.Disconnected:\n                            Console.WriteLine(&quot;Disconnected&quot;);\n                            break;\n                        case Wlan.WlanNotificationCodeAcm.ScanFail:\n                            Console.WriteLine(&quot;ScanFail&quot;);\n                            break;\n                    }\n                    break;\n                case Wlan.WlanNotificationSource.MSM:\n                    switch ((Wlan.WlanNotificationCodeMsm)notifyData.notificationCode)\n                    {\n                        case Wlan.WlanNotificationCodeMsm.Associating:\n                            break;\n                        case Wlan.WlanNotificationCodeMsm.Associated:\n                            break;\n                        case Wlan.WlanNotificationCodeMsm.Authenticating:\n                            break;\n                        case Wlan.WlanNotificationCodeMsm.Connected:\n                            break;\n                        case Wlan.WlanNotificationCodeMsm.RoamingStart:\n                            break;\n                        case Wlan.WlanNotificationCodeMsm.RoamingEnd:\n                            break;\n                        case Wlan.WlanNotificationCodeMsm.Disassociating:\n                            break;\n                        case Wlan.WlanNotificationCodeMsm.Disconnected:\n                            break;\n                        case Wlan.WlanNotificationCodeMsm.PeerJoin:\n                            break;\n                        case Wlan.WlanNotificationCodeMsm.PeerLeave:\n                            break;\n                        case Wlan.WlanNotificationCodeMsm.AdapterRemoval:\n                            break;\n                    }\n                    break;\n            }\n\n        }\n\n    }\n}       </code></pre>\n\nError\t2\tKeyword 'this' is not valid in a static property, static method, or static field initializer\tD:\\Hack\\cmd\\Hack\\Hack\\Program.cs\t224\t109\tHack\r<br />\ndon't like &quot;this&quot;  in                     wlanIface.WlanNotification += new WlanClient.WlanInterface.WlanNotificationEventHandler(this.OnWlanNotification);<br />\n",
    "PostedDate": "2016-06-09T16:03:11.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]